from bs4 import BeautifulSoup
from urllib.parse import urljoin
import requests
import subprocess
import time


def get_xss_payloads():
    payloads = []
    count = 0
    read = open("support_files/xss_payloads.txt", "r", encoding="utf-8")
    # define our necessary variables
    while True:
        count += 1
        line = read.readline()
        # read a payload
        payloads.append(line)
        # add it to our list
        if not line: # if there is no line
            break
    
    read.close()
    return payloads

def get_xss_fp():
    payloads = []
    count = 0
    dirbRead = open("dirbstripped.txt", "r")
    while True:
        count += 1
        line = dirbRead.readline()
        payloads.append(line[:-1]) # add the filepath EXCEPT the last 2 characters "\n" - which are used elsewhere
        if not line:
            break
    dirbRead.close()
    payloads.pop(count-1) # remove the last entry because its empty
    return payloads

def xss_runner(url):
    count = 0
    path = get_xss_fp()
    base_url = "http://"+url+"/"
    results = []
    while True:
        try:
            url = base_url + path[count] # create our url
            temp = xss_scan(url) # scan it
            if temp == 1:
                temp = "WAVARG believes there is XSS capabilities at " + url
                results.append(temp)
            count += 1 # up our counter so we're testing a different filepath
        except:
            break
    return results

def xss_scan(url):
    payloads = get_xss_payloads()
    try:
        print("[+] Testing url " + url)
        sess = requests.Session() # create a session
        try:
            urlcheck = sess.get(url) # ensure the address exists
        except Exception:
            print("URL is not valid, are you sure it is up?")
            return 0

        urlbody = urlcheck.text
        bs = BeautifulSoup(urlbody, "html.parser")
        all_forms = bs.find_all("form", method=True)

        # get the body of the filepath and check for <form> tags


        for form in all_forms:
            try:
                action = form["action"] # look for "action" tag in the form
            except:
                action = url # otherwise, use the URL

            values = {} # make a dict for storing the form values
            count = 0
            for value in form.find_all(["input", "textarea"]): # find everything we can write
                for payload in payloads: # for every payload we have
                    count += 1
                    try:
                        if value["type"] == "submit": # if its a submit buttom, add the value of it so we know its the submit button
                            values.update({value["name"]:value["name"]})
                        else:
                            values.update({value["name"]:payloads[count]}) # otherwise place our payload into the field
                    except:
                        continue
                    tempurl = url + action # craft our url
                    if form["method"].lower().strip() == "get": # if its a GET form
                        req = sess.get(tempurl, data=values) # send the data in a GET request
                    elif form["method"].lower().strip() == "post": # otherwise send it as a POST form
                        req = sess.post(tempurl, data=values)

                    if payloads[count] in req.text:
                        print("[!!] XSS found here")
                        time.sleep(4)
                        return 1
    except Exception as e:
        print("Something broke, error: " + str(e))


def get_lfi_payloads():
    payloads = []
    count = 0
    read = open("support_files/lfi_payloads.txt", "r", encoding="utf-8")
    while True:
        count += 1
        line = read.readline()
        payloads.append(line)
        if not line:
            break
    
    read.close()
    return payloads 
   
def get_lfi_fp():
    dirbRead = open("dirbstripped.txt", "r")
    payloads = []
    count = 0
    while True:
        count += 1
        line = dirbRead.readline()
        templine = line.strip()
        if templine[-4:] == ".php": # we're looking to find PHP functions we can inject our payload into, so the files being tested MUST be PHP files
            payloads.append(templine)
        elif not line:
            break
    
    dirbRead.close()
    return payloads

def lfi_scan(url):
    urls = get_lfi_fp()
    payloads = get_lfi_payloads()
    count = 0
    fn = "results"
    for urlpayload in urls: # for every file
        for payload in payloads: # for every payload on each file
            count += 1
            cmd = """wfuzz --ss "root:x:" -w common.txt http://"""+url+"/"+urlpayload+"?FUZZ="+payload # create our 1-liner
            print("[+] Starting scan: " + str(count))
            value = subprocess.check_output(cmd, shell=True) # run the command and see what the output is
            filename = fn + str(count) + ".txt"
            file = open(filename, "a")
            file.write(str(value)) # write it to a file
            file.close()

    return